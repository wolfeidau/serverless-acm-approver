// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wolfeidau/serverless-acm-approver/pkg/approver (interfaces: Certificate)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCertificate is a mock of Certificate interface
type MockCertificate struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateMockRecorder
}

// MockCertificateMockRecorder is the mock recorder for MockCertificate
type MockCertificateMockRecorder struct {
	mock *MockCertificate
}

// NewMockCertificate creates a new mock instance
func NewMockCertificate(ctrl *gomock.Controller) *MockCertificate {
	mock := &MockCertificate{ctrl: ctrl}
	mock.recorder = &MockCertificateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificate) EXPECT() *MockCertificateMockRecorder {
	return m.recorder
}

// Approve mocks base method
func (m *MockCertificate) Approve(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve
func (mr *MockCertificateMockRecorder) Approve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockCertificate)(nil).Approve), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockCertificate) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCertificateMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificate)(nil).Delete), arg0, arg1)
}

// Request mocks base method
func (m *MockCertificate) Request(arg0 context.Context, arg1, arg2 string, arg3 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request
func (mr *MockCertificateMockRecorder) Request(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockCertificate)(nil).Request), arg0, arg1, arg2, arg3)
}
